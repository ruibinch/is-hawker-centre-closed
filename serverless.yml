org: ruibinch
app: ihcc
service: ishawkercentreclosed

frameworkVersion: ^4.17.0
configValidationMode: error

custom:
  build:
    esbuild:
      bundle: true
      exclude:
        - '@aws-sdk/*'
        - 'test/**'
      minify: true
      sourcemap: false
      target: 'node22'
      platform: 'node'
      treeShaking: true
  botHandlers: src/bot/handlers
  apiHandlers: src/api/handlers
  scanNewFeedbackTriggerEnabled:
    dev: false
    prod: true

plugins:
  - serverless-offline
  - serverless-disable-functions

stages:
  prod:
    params:
      TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN_PROD}
  dev:
    params:
      TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN_DEV}

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION}
  environment:
    TZ: Asia/Singapore
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    TELEGRAM_BOT_TOKEN: ${param:TELEGRAM_BOT_TOKEN}
    DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
    DISCORD_ADMIN_DEV_CHANNEL_ID: ${env:DISCORD_ADMIN_DEV_CHANNEL_ID}
    DISCORD_ADMIN_PROD_CHANNEL_ID: ${env:DISCORD_ADMIN_PROD_CHANNEL_ID}
    DISCORD_FEEDBACK_CHANNEL_ID: ${env:DISCORD_FEEDBACK_CHANNEL_ID}
    REGION: ${env:REGION}
    SENTRY_DSN: ${env:SENTRY_DSN}
    TABLE_CLOSURES: ${env:TABLE_CLOSURES}
    TABLE_HC: ${env:TABLE_HC}
    TABLE_USERS: ${env:TABLE_USERS}
    TABLE_FEEDBACK: ${env:TABLE_FEEDBACK}
    TABLE_INPUTS: ${env:TABLE_INPUTS}
    ARTIFACTS_BUCKET: ${env:ARTIFACTS_BUCKET}
    SERVER_AUTH_TOKEN: ${env:SERVER_AUTH_TOKEN}
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: '*'
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*
      # Only allow access to /bot endpoint from Telegram IP ranges
      # ref: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html#api-gateway-iam-policy-resource-format-for-executing-api
      - Effect: Deny
        Principal: '*'
        Action: execute-api:Invoke
        Resource:
          - execute-api:/prod/POST/bot
        Condition:
          NotIpAddress:
            aws:SourceIp:
              # https://core.telegram.org/resources/cidr.txt
              - '91.108.56.0/22'
              - '91.108.4.0/22'
              - '91.108.8.0/22'
              - '91.108.16.0/22'
              - '91.108.12.0/22'
              - '149.154.160.0/20'
              - '91.105.192.0/23'
              - '91.108.20.0/22'
              - '185.76.151.0/24'
              - '2001:b28:f23d::/48'
              - '2001:b28:f23f::/48'
              - '2001:67c:4e8::/48'
              - '2001:b28:f23c::/48'
              - '2a0a:f280::/32'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:CreateTable
            - dynamodb:DeleteTable
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_CLOSURES}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:CreateTable
            - dynamodb:DeleteTable
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_HC}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:CreateBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_USERS}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:CreateBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_FEEDBACK}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:CreateBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_INPUTS}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:ListBackups
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*/backup/*'
        - Effect: Allow
          Action:
            - dynamodb:DeleteBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_USERS}-${self:provider.stage}/backup/*'
        - Effect: Allow
          Action:
            - dynamodb:DeleteBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_FEEDBACK}-${self:provider.stage}/backup/*'
        - Effect: Allow
          Action:
            - dynamodb:DeleteBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_INPUTS}-${self:provider.stage}/backup/*'
        - Effect: Allow
          Action:
            - s3:CreateBucket
            - s3:ListBucket
          Resource: 'arn:aws:s3:::${env:ARTIFACTS_BUCKET}'
        - Effect: Allow
          Action:
            - s3:DeleteObject
            - s3:GetObject
            - s3:PutObject
          Resource: 'arn:aws:s3:::${env:ARTIFACTS_BUCKET}/*'

package:
  patterns:
    - '!./**'
    - 'src/**'

functions:
  bot:
    handler: ${self:custom.botHandlers}/bot.handler
    events:
      - http:
          method: post
          path: /bot
    maximumEventAge: 60
    maximumRetryAttempts: 0
  # triggers
  notificationsTrigger:
    handler: ${self:custom.botHandlers}/notificationsTrigger.handler
    events:
      # runs daily at 22:00 UTC, or 6am SGT
      - schedule: cron(0 22 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  scanNewFeedbackTrigger:
    handler: ${self:custom.botHandlers}/scanNewFeedbackTrigger.handler
    enabled: ${self:custom.scanNewFeedbackTriggerEnabled.${opt:stage, 'dev'}}
    events:
      # runs daily at 20:03 UTC, or 4:03am SGT
      - schedule: cron(3 20 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  runBackupTrigger:
    handler: ${self:custom.botHandlers}/runBackupTrigger.handler
    timeout: 30
    events:
      # runs every Sat at 20:08 UTC, or 4:08am SGT
      - schedule: cron(8 20 ? * sat *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  syncDbTrigger:
    handler: ${self:custom.botHandlers}/syncDbTrigger.handler
    timeout: 600
    events:
      # runs daily at 20:13 UTC, or 4:13am SGT
      - schedule: cron(13 20 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  checkHealthinessTrigger:
    handler: ${self:custom.botHandlers}/checkHealthinessTrigger.handler
    timeout: 600
    events:
      # runs daily at 20:28 UTC, or 4:28am SGT
      - schedule: cron(28 20 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  analyseSearchResponsesTrigger:
    handler: ${self:custom.botHandlers}/analyseSearchResponsesTrigger.handler
    timeout: 30
    events:
      # runs every Sat at 20:38 UTC, or 4:38am SGT
      - schedule: cron(38 20 ? * sat *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  # server
  getInputs:
    handler: ${self:custom.apiHandlers}/getInputs.handler
    events:
      - http:
          method: post
          path: /api/inputs
  getUsers:
    handler: ${self:custom.apiHandlers}/getUsers.handler
    events:
      - http:
          method: post
          path: /api/users
  hcFavouritesCount:
    handler: ${self:custom.apiHandlers}/hcFavouritesCount.handler
    events:
      - http:
          method: get
          path: /api/hcFavouritesCount
  statistics:
    handler: ${self:custom.apiHandlers}/statistics.handler
    events:
      - http:
          method: get
          path: /api/statistics
