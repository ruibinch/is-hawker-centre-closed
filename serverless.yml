org: ruibinch
app: ihcc
service: ishawkercentreclosed

frameworkVersion: '3'
configValidationMode: error

useDotenv: true

custom:
  webpack:
    packager: yarn
    includeModules: true
  botHandlers: src/bot/handlers
  serverHandlers: src/server/handlers

plugins:
  - serverless-webpack
  - serverless-offline

params:
  prod:
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN_PROD}
  dev:
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN_DEV}

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION}
  environment:
    TZ: Asia/Singapore
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STAGE: ${self:provider.stage}
    TELEGRAM_BOT_TOKEN: ${param:TELEGRAM_BOT_TOKEN}
    DISCORD_BOT_TOKEN: ${env:DISCORD_BOT_TOKEN}
    DISCORD_ADMIN_DEV_CHANNEL_ID: ${env:DISCORD_ADMIN_DEV_CHANNEL_ID}
    DISCORD_ADMIN_PROD_CHANNEL_ID: ${env:DISCORD_ADMIN_PROD_CHANNEL_ID}
    DISCORD_CLOSURES_ADMIN_DEV_CHANNEL_ID: ${env:DISCORD_CLOSURES_ADMIN_DEV_CHANNEL_ID}
    DISCORD_CLOSURES_ADMIN_PROD_CHANNEL_ID: ${env:DISCORD_CLOSURES_ADMIN_PROD_CHANNEL_ID}
    REGION: ${env:REGION}
    SENTRY_DSN: ${env:SENTRY_DSN}
    TABLE_CLOSURES: ${env:TABLE_CLOSURES}
    TABLE_HC: ${env:TABLE_HC}
    TABLE_USERS: ${env:TABLE_USERS}
    TABLE_FEEDBACK: ${env:TABLE_FEEDBACK}
    TABLE_INPUTS: ${env:TABLE_INPUTS}
    SERVER_AUTH_TOKEN: ${env:SERVER_AUTH_TOKEN}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:CreateTable
            - dynamodb:DeleteTable
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_CLOSURES}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:CreateTable
            - dynamodb:DeleteTable
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_HC}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:CreateBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_USERS}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:CreateBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_FEEDBACK}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_INPUTS}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - dynamodb:ListBackups
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*/backup/*'
        - Effect: Allow
          Action:
            - dynamodb:DeleteBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_USERS}-${self:provider.stage}/backup/*'
        - Effect: Allow
          Action:
            - dynamodb:DeleteBackup
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${env:TABLE_FEEDBACK}-${self:provider.stage}/backup/*'

package:
  patterns:
    - '!./**'
    - 'src/**'

functions:
  bot:
    handler: ${self:custom.botHandlers}/bot.handler
    events:
      - http:
          method: post
          path: /bot
    maximumEventAge: 60
    maximumRetryAttempts: 0
  # triggers
  notificationsTrigger:
    handler: ${self:custom.botHandlers}/notificationsTrigger.handler
    events:
      # runs daily at 22:00 UTC, or 6am SGT
      - schedule: cron(0 22 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  scanNewEntriesTrigger:
    handler: ${self:custom.botHandlers}/scanNewEntriesTrigger.handler
    events:
      # runs every Sun at 20:00 UTC, or 4am SGT
      - schedule: cron(0 20 ? * sun *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  runBackupTrigger:
    handler: ${self:custom.botHandlers}/runBackupTrigger.handler
    timeout: 30
    events:
      # runs every Sun at 20:05 UTC, or 4:05am SGT
      - schedule: cron(5 20 ? * sun *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  syncDbTrigger:
    handler: ${self:custom.botHandlers}/syncDbTrigger.handler
    timeout: 600
    events:
      # runs daily at 20:10 UTC, or 4:10am SGT
      - schedule: cron(10 20 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  checkHealthinessTrigger:
    handler: ${self:custom.botHandlers}/checkHealthinessTrigger.handler
    timeout: 30
    events:
      # runs daily at 20:28 UTC, or 4:28am SGT
      - schedule: cron(28 20 * * ? *)
    maximumEventAge: 60
    maximumRetryAttempts: 0
  # server
  inputs:
    handler: ${self:custom.serverHandlers}/inputs.handler
    events:
      - http:
          method: post
          path: /api/inputs
  users:
    handler: ${self:custom.serverHandlers}/users.handler
    events:
      - http:
          method: post
          path: /api/users
  feedback:
    handler: ${self:custom.serverHandlers}/feedback.handler
    events:
      - http:
          method: post
          path: /api/feedback
  hcFavourites:
    handler: ${self:custom.serverHandlers}/hcFavourites.handler
    events:
      - http:
          method: get
          path: /api/hcFavourites
  statistics:
    handler: ${self:custom.serverHandlers}/statistics.handler
    events:
      - http:
          method: post
          path: /api/statistics
